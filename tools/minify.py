#!/usr/bin/env python3
import subprocess
import os

def minify_shader(shader_path, output_path):
    subprocess.run(["mono", "tools/shader_minifier.exe", "--format", "none",
                    "--preserve-externals", "-o", output_path, shader_path])

def escape_string(contents):
    return contents.replace("\\", "\\\\").replace("\"", "\\\"").replace("\n", "\\n")

def main():
    os.makedirs("build", exist_ok=True)
    shader_files = [
        ("src/frag.glsl", "build/frag.min"),
        ("src/vert.glsl", "build/vert.min"),
    ]
    for shader, output in shader_files:
        minify_shader(shader, output)
    with open("src/shaders.gen.c", 'w') as header:
        header.write("// Generated by tools/minify.py\n\n")
        for shader, minified in shader_files:
            with open(minified, 'r') as file:
                contents = file.read()
                name = os.path.basename(minified).replace('.', '_').upper()
                header.write(f"const char *{name} = \"{escape_string(contents)}\";\n")
                header.write(f"#define {name}_LENGTH {len(contents)}\n")

if __name__ == "__main__":
    main()
